#!/bin/bash

# Color Definitions
GREEN="\033[32m"
RED="\033[31m"
YELLOW="\033[33m"
BLUE="\033[36m"
NC="\033[0m" # No Color

# Update & Install Dependencies
sudo apt update -y
sudo apt upgrade -y
sudo apt install -y figlet lolcat wondershaper ruby

# Clear Screen
clear

# Typing Banner Function
typing_banner() {
  local text="$1"
  local color="$2"
  echo -e "${color}\e[1m"  # Set color and make bold
  for (( i=0; i<${#text}; i++ )); do
    echo -ne "${text:i:1}"
    sleep 0.1  # Adjust speed if needed
  done
  echo -e "${NC}"  # Reset color
}

# Get Public IP
IP=$(curl -sS ipv4.icanhazip.com)

    # Deteksi OS dan versi
    source /etc/os-release
    VERSION=$(echo $VERSION_ID | tr -d '"')
    OS=$ID

    # Validasi OS yang didukung
    if [[ "$OS" != "ubuntu" && "$OS" != "debian" ]]; then
        echo -e "${RED}Unsupported OS. Exiting...${NC}"
        exit 1
    fi

    if [[ "$OS" == "debian" && ("$VERSION" == "10" || "$VERSION" == "11") ]]; then
        echo -e "${GREEN}Debian $VERSION is supported.${NC}"
    elif [[ "$OS" == "ubuntu" && ("$VERSION" == "20.04" || "$VERSION" == "22.04") ]]; then
        echo -e "${GREEN}Ubuntu $VERSION is supported.${NC}"
    else
        echo -e "${RED}Unsupported version. Exiting...${NC}"
        exit 1
    fi

# IP Validation
if [[ -z "$IP" ]]; then
  echo -e "${RED}[ERROR] IP Address (${YELLOW}Not Detected${NC})"
  exit 1
else
  echo -e "${GREEN}» IP Address (${GREEN}${IP}${NC})"
fi

# IP Registration Check
izinsc="https://raw.githubusercontent.com/SaputraTech/R3P0_1Z1N_V1/main/supra-bapak"


# User Confirmation
read -p "Press ${GREEN}[Enter]${NC} to start the installation..."
clear

# Root User Check
if [[ "$EUID" -ne 0 ]]; then
  echo "You need to run this script as root"
  exit 1
fi

# Virtualization Check
if [[ "$(systemd-detect-virt)" == "openvz" ]]; then
  echo "OpenVZ is not supported"
  exit 1
fi

# Loading
echo -e "${GREEN}Loading...${NC}"
clear

# Installation Timer
start=$(date +%s)

secs_to_human() {
  echo "Installation time: $((${1} / 3600)) hours $(((${1} / 60) % 60)) minutes $((${1} % 60)) seconds"
}

##############################################################

# Calculate and Display Installation Time
end=$(date +%s)
duration=$((end - start))
secs_to_human $duration

function print_ok() {
echo -e "${OK} ${BLUE} $1 ${FONT}"
}
function print_install() {
echo -e "${green} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ${FONT}"
echo -e "${YELLOW} » $1 ${FONT}"
echo -e "${green} ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ${FONT}"
sleep 1
}
function print_error() {
echo -e "${ERROR} ${REDBG} $1 ${FONT}"
}
# Fungsi untuk menampilkan pesan sukses
function print_success() {
    if [[ 0 -eq $? ]]; then
        echo -e "${green}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${FONT}"
        echo -e "${green} » $1 installed successfully ${FONT}"
        echo -e "${green}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${FONT}"
        sleep 2
    fi
}

function is_root() {
    if [[ $UID -eq 0 ]]; then
        print_ok "Root user detected. Starting installation process."
    else
        print_error "The current user is not the root user. Please switch to the root user and run the script again."
    fi
}

##############################################################

Ram_Usage=$((mem_used / 1024))
Ram_Total=$((mem_total / 1024))

export tanggal=$(date -d "0 days" +"%d-%m-%Y - %X")
export OS_Name=$(grep -w PRETTY_NAME /etc/os-release | cut -d '"' -f 2)
export Kernel=$(uname -r)
export Arch=$(uname -m)
export IP=$(curl -s https://ipinfo.io/ip)

# Memory usage calculation
mem_used=0
mem_total=0
while read -r key value _; do
    case $key in
        "MemTotal:") mem_total=$((value));;
        "Shmem:") mem_used=$((mem_used + value));;
        "MemFree:" | "Buffers:" | "Cached:" | "SReclaimable:") mem_used=$((mem_used + value));;
    esac
done < /proc/meminfo

##############################################################

function skt-xray() {
print_install "Creating Xray directory"
mkdir -p /etc/xray
curl -s ifconfig.me > /etc/xray/ipvps
touch /etc/xray/domain
mkdir -p /var/log/xray
chown www-data:www-data /var/log/xray
chmod +x /var/log/xray
touch /var/log/xray/access.log
touch /var/log/xray/error.log
mkdir -p /var/lib/kyt >/dev/null 2>&1
}
skt-xray

##############################################################

function first_setup() {
    timedatectl set-timezone Africa/Nairobi
    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections
    print_ok "Xray directory setup complete."

    OS_ID=$(grep -w ID /etc/os-release | cut -d '=' -f 2 | tr -d '"')
    OS_NAME=$(grep -w PRETTY_NAME /etc/os-release | cut -d '"' -f 2)

    if [[ "$OS_ID" == "ubuntu" ]]; then
        echo "Setting up dependencies for $OS_NAME"
        apt update -y
        apt-get install --no-install-recommends software-properties-common -y

        if ! dpkg -l | grep -q haproxy; then
            echo "HAProxy is not installed. Installing..."
            add-apt-repository ppa:vbernat/haproxy -y
            apt update
            apt-get install haproxy -y
        else
            echo "HAProxy is already installed."
        fi

    elif [[ "$OS_ID" == "debian" ]]; then
        echo "Setting up dependencies for $OS_NAME"
        curl -fsSL https://haproxy.debian.net/bernat.debian.org.gpg | gpg --dearmor -o /usr/share/keyrings/haproxy.debian.net.gpg
        echo "deb [signed-by=/usr/share/keyrings/haproxy.debian.net.gpg] http://haproxy.debian.net $(lsb_release -cs)-backports main" | tee /etc/apt/sources.list.d/haproxy.list
        apt-get update
        apt-get install haproxy -y
    else
        print_error "Your OS is not supported ($OS_NAME)"
    fi
}
clear

##############################################################

function nginx_install() {
    OS_ID=$(grep -w ID /etc/os-release | cut -d'=' -f2 | tr -d '"')
    OS_NAME=$(grep -w PRETTY_NAME /etc/os-release | cut -d'=' -f2 | tr -d '"')

    if [[ "$OS_ID" == "ubuntu" ]]; then
        print_install "Setting up NGINX for OS: $OS_NAME"
        sudo apt-get install nginx -y
    elif [[ "$OS_ID" == "debian" ]]; then
        print_success "Setting up NGINX for OS: $OS_NAME"
        sudo apt -y install nginx
    else
        echo -e "Your OS is not supported (${YELLOW}$OS_NAME${FONT})"
    fi
}

##############################################################

function base_package() {
    clear
    print_install "Installing the Required Packages"

    apt update -y && apt upgrade -y && apt dist-upgrade -y
    apt install -y \
        zip pwgen openssl netcat socat cron bash-completion figlet \
        ntpdate sudo debconf-utils iptables-persistent \
        speedtest-cli vnstat libnss3-dev libnspr4-dev pkg-config \
        libpam0g-dev libcap-ng-dev libcap-ng-utils libselinux1-dev \
        libcurl4-nss-dev flex bison make libnss3-tools libevent-dev \
        bc rsyslog dos2unix zlib1g-dev libssl-dev libsqlite3-dev \
        sed dirmngr libxml-parser-perl build-essential gcc g++ python \
        htop lsof tar wget curl ruby unzip p7zip-full python3-pip \
        libc6 util-linux msmtp-mta ca-certificates bsd-mailx \
        netfilter-persistent net-tools gnupg gnupg2 lsb-release \
        shc cmake git screen xz-utils apt-transport-https \
        gnupg1 dnsutils jq openvpn easy-rsa

    systemctl enable --now chronyd chrony
    chronyc sourcestats -v
    chronyc tracking -v

    ntpdate pool.ntp.org

    sudo apt-get clean
    sudo apt-get autoremove -y

    sudo apt-get remove --purge -y exim4 ufw firewalld
    sudo apt-get install -y --no-install-recommends software-properties-common

    echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections
    echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections

    print_success "Required packages installed successfully."
}
clear

##############################################################

function install_domain() {
    clear
    echo -e " ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo -e " \e[2mPlease Select a Domain Type Below\e[0m"
    echo -e " ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo -e " \e[2m1)\e[0m Use Your Own Domain (Recommended)"
    echo -e " \e[2m2)\e[0m Use Random Domain"
    echo -e " ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    read -p " Please select numbers 1-2 or Any Button (Random): " host
    echo ""

    if [[ "$host" == "1" ]]; then
        echo -e " \e[2mPlease Enter Your Domain\e[0m"
        echo -e " ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        read -p " Input Domain: " host1
        echo -e " ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "IP=" > /var/lib/kyt/ipvps.conf
        echo "$host1" > /etc/xray/domain
        echo "$host1" > /root/domain
        echo "Domain successfully set to $host1"
        
    elif [[ "$host" == "2" ]]; then
        wget "${REPO}ubuntu/cf.sh" && chmod +x cf.sh && ./cf.sh
        rm -f cf.sh
        clear
        
    else
        echo "Random Subdomain/Domain is Used"
        clear
    fi
}

clear

##############################################################

restart_system() {
    MYIP=$(curl -sS ipv4.icanhazip.com)
    echo -e "\e[32mloading...\e[0m"
    clear

    izins="https://raw.githubusercontent.com/SaputraTech/R3P0_1Z1N_V1/main/supra-bapak"
    rm -f /usr/bin/user
    username=$(curl -s $izins | grep $MYIP | awk '{print $2}')
    echo "$username" > /usr/bin/user

    expx=$(curl -s $izins | grep $MYIP | awk '{print $3}')
    echo "$expx" > /usr/bin/e

    username=$(cat /usr/bin/user)
    oi=$(cat /usr/bin/ver)
    ex=$(cat /usr/bin/e)
    clear

    today=$(date +%Y-%m-%d)
    valid=$(date -d "$expx" +%s)
    d1=$(date -d "$valid" +%s)
    d2=$(date -d "$today" +%s)

    certifacat=$(((d1 - d2) / 86400))
    echo "Cert expiration in: $certifacat days"

    datediff() {
        d1=$(date -d "$1" +%s)
        d2=$(date -d "$2" +%s)
        echo -e "$COLOR1 $NC Expiry In   : $(( (d1 - d2) / 86400 )) Days"
    }

    # Check expiry date
    Exp1=$(curl -s $izins | grep $MYIP | awk '{print $4}')
    if [[ $today < $Exp1 ]]; then
        status="Active"
    else
        status="Expired"
    fi

    TIMEZONE=$(date +"%H:%M:%S")
    KEY="6623979288:AAHeqh3tO_pZ3UVRz_bIN1qgyQuDPq0q0SI"
    URL="https://api.telegram.org/bot$KEY/sendMessage"
    
    TEXT="<code>━━━━━━━━━━━━━━━━━━━━━━━━━</code>
    <b>WELCOME TO CHAPEEY STORE</b>
    <code>━━━━━━━━━━━━━━━━━━━━━━━━━</code>
    <code>User     :</code><code>$username</code>
    <code>Domain   :</code><code>$domain</code>
    <code>IPVPS    :</code><code>$MYIP</code>
    <code>ISP      :</code><code>$ISP</code>
    <code>DATE     :</code><code>$today</code>
    <code>Time     :</code><code>$TIMEZONE</code>
    <code>Exp Sc.  :</code><code>$status</code>
    <code>━━━━━━━━━━━━━━━━━━━━━━━━━</code>
    <b>WELCOME TO CHAPEEY STORE</b>
    <code>━━━━━━━━━━━━━━━━━━━━━━━━━</code>
    <i>Automatic Notifications From Github</i>"

    curl -s --max-time 30 -d "chat_id=$CHAT_ID&text=$TEXT&parse_mode=html" $URL > /dev/null
}

##############################################################

clear
function install_ssl() {
  clear
  print_install "Installing SSL On Domain"

  # Menghapus file SSL yang lama
  rm -rf /etc/xray/xray.key
  rm -rf /etc/xray/xray.crt

  # Mengambil domain dari file /root/domain
  domain=$(cat /root/domain)

  # Menghentikan web server yang berjalan di port 80
  STOPWEBSERVER=$(lsof -i:80 | awk 'NR>1 {print $1}' | head -n 1)

  # Menghapus direktori dan file lama yang berkaitan dengan ACME
  rm -rf /root/.acme.sh
  mkdir /root/.acme.sh

  # Menghentikan layanan web server dan nginx
  systemctl stop $STOPWEBSERVER
  systemctl stop nginx

  # Mengunduh dan menginstal skrip ACME
  curl https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
  chmod +x /root/.acme.sh/acme.sh

  # Memperbarui dan mengonfigurasi ACME
  /root/.acme.sh/acme.sh --upgrade --auto-upgrade
  /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt

  # Menghasilkan sertifikat SSL untuk domain
  /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256

  # Menginstal sertifikat SSL
  /root/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc

  # Mengatur izin file SSL
  chmod 777 /etc/xray/xray.key

  # Menampilkan pesan sukses
  print_success "SSL Certificate"
}


##############################################################

function make_folder_xray() {
rm -rf /etc/vmess/.vmess.db
rm -rf /etc/vless/.vless.db
rm -rf /etc/trojan/.trojan.db
rm -rf /etc/shadowsocks/.shadowsocks.db
rm -rf /etc/ssh/.ssh.db
rm -rf /etc/bot/.bot.db
rm -rf /etc/user-create/user.log
mkdir -p /etc/bot
mkdir -p /etc/xray
mkdir -p /etc/vmess
mkdir -p /etc/vless
mkdir -p /etc/trojan
mkdir -p /etc/shadowsocks
mkdir -p /etc/ssh
mkdir -p /usr/bin/xray/
mkdir -p /var/log/xray/
mkdir -p /var/www/html
mkdir -p /etc/kyt/limit/vmess/ip
mkdir -p /etc/kyt/limit/vless/ip
mkdir -p /etc/kyt/limit/trojan/ip
mkdir -p /etc/kyt/limit/ssh/ip
mkdir -p /etc/limit/vmess
mkdir -p /etc/limit/vless
mkdir -p /etc/limit/trojan
mkdir -p /etc/limit/ssh
mkdir -p /etc/user-create
chmod +x /var/log/xray
touch /etc/xray/domain
touch /var/log/xray/access.log
touch /var/log/xray/error.log
touch /etc/vmess/.vmess.db
touch /etc/vless/.vless.db
touch /etc/trojan/.trojan.db
touch /etc/shadowsocks/.shadowsocks.db
touch /etc/ssh/.ssh.db
touch /etc/bot/.bot.db
echo "& plughin Account" >>/etc/vmess/.vmess.db
echo "& plughin Account" >>/etc/vless/.vless.db
echo "& plughin Account" >>/etc/trojan/.trojan.db
echo "& plughin Account" >>/etc/shadowsocks/.shadowsocks.db
echo "& plughin Account" >>/etc/ssh/.ssh.db
echo "echo -e '\''Vps Config User Account'\''" >> /etc/user-create/user.log
}

##############################################################

clear
function install_xray() {
  clear
  print_install "Core Xray Latest Version"

  # Direktori untuk soket domain
  domainSock_dir="/run/xray"
  sudo mkdir -p "$domainSock_dir"
  sudo chown www-data:www-data "$domainSock_dir"
  
  # Mengambil versi terbaru dari Xray
  latest_version=$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)
  
  # Mengunduh dan menginstal Xray
  bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u www-data --version "$latest_version"
  
  # Mengunduh konfigurasi Xray
  sudo wget -O /etc/xray/config.json "${REPO}ubuntu/config.json" >/dev/null 2>&1
  sudo wget -O /etc/systemd/system/runn.service "${REPO}ubuntu/runn.service" >/dev/null 2>&1
  
  # Mengambil domain dan IP dari konfigurasi Xray
  domain=$(cat /etc/xray/domain)
  IP=$(cat /etc/xray/ipvps)

  print_success "Core Xray Latest Version"
  clear
  
  # Menyimpan lokasi kota dan ISP
  sudo curl -s ipinfo.io/city | sudo tee /etc/xray/city
  sudo curl -s ipinfo.io/org | cut -d " " -f 2-10 | sudo tee /etc/xray/isp
  
  print_install "Installing Packet Configuration"
  
  # Mengunduh dan mengkonfigurasi file HAProxy dan Nginx
  sudo wget -O /etc/haproxy/haproxy.cfg "${REPO}ubuntu/haproxy.cfg" >/dev/null 2>&1
  sudo wget -O /etc/nginx/conf.d/xray.conf "${REPO}ubuntu/xray.conf" >/dev/null 2>&1
  sudo sed -i "s/xxx/${domain}/g" /etc/haproxy/haproxy.cfg
  sudo sed -i "s/xxx/${domain}/g" /etc/nginx/conf.d/xray.conf
  sudo curl "${REPO}ubuntu/nginx.conf" > /etc/nginx/nginx.conf
  
  # Menggabungkan sertifikat dan kunci untuk HAProxy
  cat /etc/xray/xray.crt /etc/xray/xray.key | sudo tee /etc/haproxy/hap.pem
  
  # Memberikan hak akses eksekusi pada service runn
  sudo chmod +x /etc/systemd/system/runn.service
  
  # Menghapus konfigurasi lama dan membuat konfigurasi Xray baru
  sudo rm -rf /etc/systemd/system/xray.service.d
  sudo bash -c 'cat > /etc/systemd/system/xray.service <<EOF
[Unit]
Description=Xray Service
Documentation=https://github.com/XTLS/Xray-core
After=network.target nss-lookup.target

[Service]
User=www-data
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/xray run -config /etc/xray/config.json
Restart=on-failure
RestartPreventExitStatus=1
LimitNOFILE=1048576
LimitNPROC=1048576

[Install]
WantedBy=multi-user.target
EOF'
  
  print_success "Configuration Packet"
}

##############################################################

clear
function ssh(){
clear

wget -O /etc/pam.d/common-password "${REPO}SKT-Tools/password"
chmod +x /etc/pam.d/common-password
DEBIAN_FRONTEND=noninteractive dpkg-reconfigure keyboard-configuration
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/altgr select The default for the keyboard layout"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/compose select No compose key"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/ctrl_alt_bksp boolean false"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layoutcode string de"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/layout select English"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/modelcode string pc105"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/model select Generic 105-key (Intl) PC"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/optionscode string "
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/store_defaults_in_debconf_db boolean true"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/switch select No temporary switch"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/toggle select No toggling"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_layout boolean true"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_config_options boolean true"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_layout boolean true"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/unsupported_options boolean true"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variantcode string "
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/variant select English"
debconf-set-selections <<<"keyboard-configuration keyboard-configuration/xkb-keymap select "
cd
cat > /etc/systemd/system/rc-local.service <<-END
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local
[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=tty
RemainAfterExit=yes
SysVStartPriority=99
[Install]
WantedBy=multi-user.target
END
cat > /etc/rc.local <<-END
exit 0
END
chmod +x /etc/rc.local
systemctl enable rc-local
systemctl start rc-local.service
echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
sed -i '$ i\echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6' /etc/rc.local
ln -fs /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
sed -i 's/AcceptEnv/#AcceptEnv/g' /etc/ssh/sshd_config
  print_success "Password SSH"
}

function udp_mini(){
  clear
  print_install "Installing Service Limit IP & Quota"

  # Mengunduh dan menjalankan fv-tunnel
  wget -q https://raw.githubusercontent.com/SaputraTech/M4k4r0n1/main/ubuntu/fv-tunnel && chmod +x fv-tunnel && ./fv-tunnel

  # Mengatur direktori dan file konfigurasi untuk udp-mini
  mkdir -p /usr/local/kyt/
  wget -q -O /usr/local/kyt/udp-mini "${REPO}ubuntu/udp-mini"
  chmod +x /usr/local/kyt/udp-mini
  wget -q -O /etc/systemd/system/udp-mini-1.service "${REPO}ubuntu/udp-mini-1.service"
  wget -q -O /etc/systemd/system/udp-mini-2.service "${REPO}ubuntu/udp-mini-2.service"
  wget -q -O /etc/systemd/system/udp-mini-3.service "${REPO}ubuntu/udp-mini-3.service"

  # Menonaktifkan dan memulai layanan udp-mini
  systemctl disable udp-mini-1
  systemctl stop udp-mini-1
  systemctl enable udp-mini-1
  systemctl start udp-mini-1

  systemctl disable udp-mini-2
  systemctl stop udp-mini-2
  systemctl enable udp-mini-2
  systemctl start udp-mini-2

  systemctl disable udp-mini-3
  systemctl stop udp-mini-3
  systemctl enable udp-mini-3
  systemctl start udp-mini-3

  print_success "Limit IP Service"
}

##############################################################

clear
function ssh_slow() {
  clear
  print_install "Installing the SlowDNS Server module"
  
  # Mengunduh script nameserver
  if wget -q -O /tmp/nameserver "${REPO}ubuntu/nameserver"; then
    chmod +x /tmp/nameserver
    
    # Menjalankan script nameserver dan menyimpan log
    if bash /tmp/nameserver | tee /root/install.lo; then
      print_success "SlowDNS installed successfully"
    else
      echo "Failed to execute the nameserver script"
      return 1
    fi
  else
    echo "Failed to download nameserver"
    return 1
  fi
}

##############################################################

clear
function ins_SSHD(){
  clear
  print_install "Installing SSHD"
  
  # Mengunduh file konfigurasi SSHD
  wget -q -O /etc/ssh/sshd_config "${REPO}ubuntu/sshd" >/dev/null 2>&1
  
  # Memberikan izin yang sesuai pada file konfigurasi
  chmod 644 /etc/ssh/sshd_config
  
  # Merestart SSH menggunakan systemctl (lebih modern)
  systemctl restart ssh
  
  # Memeriksa status SSH
  systemctl status ssh

  # Menampilkan pesan sukses
  print_success "SSHD installed and restarted successfully"
}


##############################################################

clear
function ins_dropbear(){
  clear
  print_install "Installing Dropbear"
  
  # Instalasi Dropbear
  apt-get install dropbear -y > /dev/null 2>&1
  
  # Mengunduh file konfigurasi dropbear
  wget -q -O /etc/default/dropbear "${REPO}ubuntu/dropbear.conf"
  
  # Memberikan izin yang sesuai pada file konfigurasi
  chmod 644 /etc/default/dropbear

  # Merestart Dropbear
  /etc/init.d/dropbear restart
  
  # Menampilkan status Dropbear
  /etc/init.d/dropbear status

  # Menampilkan pesan sukses
  print_success "Dropbear installed and restarted successfully"
}


##############################################################

clear
function ins_vnstat(){
  clear
  print_install "Installing Vnstat"
  
  # Instalasi vnstat
  apt -y install vnstat > /dev/null 2>&1
  /etc/init.d/vnstat restart
  
  # Instalasi dependensi
  apt -y install libsqlite3-dev > /dev/null 2>&1
  
  # Mengunduh dan mengekstrak vnstat
  wget https://humdi.net/vnstat/vnstat-2.8.tar.gz
  tar zxvf vnstat-2.8.tar.gz
  cd vnstat-2.8

  # Mengonfigurasi, membangun, dan menginstal vnstat
  ./configure --prefix=/usr --sysconfdir=/etc && make && make install
  cd

  # Memastikan vnstat berjalan pada interface yang benar
  vnstat -u -i $NET
  sed -i "s/Interface \"eth0\"/Interface \"$NET\"/g" /etc/vnstat.conf

  # Memberikan izin yang tepat
  chown -R vnstat:vnstat /var/lib/vnstat

  # Mengaktifkan dan merestart vnstat
  systemctl enable vnstat
  /etc/init.d/vnstat restart
  /etc/init.d/vnstat status

  # Membersihkan file yang tidak diperlukan
  rm -f /root/vnstat-2.8.tar.gz
  rm -rf /root/vnstat-2.8

  # Menampilkan pesan sukses
  print_success "Vnstat installed and configured successfully"
}


##############################################################

clear
function ins_openvpn(){
  clear
  print_install "Installing OpenVPN"
  
  # Mengunduh dan menjalankan OpenVPN
  wget "${REPO}ubuntu/openvpn" -O /usr/local/bin/openvpn && chmod +x /usr/local/bin/openvpn
  /usr/local/bin/openvpn

  # Restart OpenVPN
  /etc/init.d/openvpn restart

  # Menampilkan pesan sukses
  print_success "OpenVPN installed and restarted successfully"
}

function ins_backup(){
  clear
  print_install "Installing Backup Server"
  
  # Menginstal rclone
  apt install rclone -y
  printf "q\n" | rclone config

  # Mengunduh file konfigurasi rclone
  wget -O /root/.config/rclone/rclone.conf "${REPO}ubuntu/rclone.conf"

  # Mengunduh dan menginstal wondershaper
  cd /bin
  git clone https://github.com/magnific0/wondershaper.git
  cd wondershaper
  sudo make install
  cd

  # Menghapus direktori wondershaper setelah instalasi
  rm -rf /bin/wondershaper

  # Membuat file limit
  echo > /home/limit

  # Menginstal msmtp dan dependensinya
  apt install msmtp-mta ca-certificates bsd-mailx -y

  # Menulis konfigurasi msmtp
  cat <<EOF > /etc/msmtprc
defaults
  tls on
  tls_starttls on
  tls_trust_file /etc/ssl/certs/ca-certificates.crt
account default
  host smtp.gmail.com
  port 587
  auth on
  user oceantestdigital@gmail.com
  from oceantestdigital@gmail.com
  password jokerman77
  logfile ~/.msmtp.log
EOF

  # Mengubah pemilik file msmtprc
  chown -R www-data:www-data /etc/msmtprc

  # Mengunduh dan menjalankan skrip ipserver
  wget -q -O /etc/ipserver "${REPO}ubuntu/ipserver" && bash /etc/ipserver

  # Menampilkan pesan sukses
  print_success "Backup Server installed and configured successfully"
}

##############################################################

clear

function ins_swab(){
  clear
  print_install "Installing Swap 1G"

  # Mendapatkan versi terbaru dari gotop
  gotop_latest=$(curl -s https://api.github.com/repos/xxxserxxx/gotop/releases | grep tag_name | sed -E 's/.*"v(.*)".*/\1/' | head -n 1)
  gotop_link="https://github.com/xxxserxxx/gotop/releases/download/v$gotop_latest/gotop_v$gotop_latest_linux_amd64.deb"

  # Mengunduh dan menginstal gotop
  curl -sL "$gotop_link" -o /tmp/gotop.deb
  dpkg -i /tmp/gotop.deb >/dev/null 2>&1

  # Membuat swap 1G
  dd if=/dev/zero of=/swapfile bs=1M count=1024
  mkswap /swapfile
  chown root:root /swapfile
  chmod 0600 /swapfile >/dev/null 2>&1
  swapon /swapfile >/dev/null 2>&1

  # Menambahkan swapfile ke /etc/fstab agar persistensi
  sed -i '$ i\/swapfile      swap swap   defaults    0 0' /etc/fstab

  # Mengonfigurasi NTP
  chronyd -q 'server 0.id.pool.ntp.org iburst'
  chronyc sourcestats -v
  chronyc tracking -v

  # Mengunduh dan menjalankan bbr.sh
  wget "${REPO}ubuntu/bbr.sh" && chmod +x bbr.sh && ./bbr.sh

  # Menampilkan pesan sukses
  print_success "Swap 1G installed and configured successfully"
}


##############################################################

function ins_Fail2ban(){
  clear
  print_install "Installing Fail2ban"

  # Menginstal fail2ban
  apt -y install fail2ban > /dev/null 2>&1
  sudo systemctl enable --now fail2ban
  /etc/init.d/fail2ban restart
  /etc/init.d/fail2ban status

  # Memeriksa apakah direktori /usr/local/ddos sudah ada
  if [ -d '/usr/local/ddos' ]; then
    echo "Please un-install the previous version first"
    exit 0
  else
    mkdir /usr/local/ddos
  fi

  clear

  # Menambahkan banner ke /etc/ssh/sshd_config
  echo "Banner /etc/kyt.txt" >> /etc/ssh/sshd_config

  # Mengubah konfigurasi dropbear untuk banner
  sed -i 's@DROPBEAR_BANNER@DROPBEAR_BANNER /etc/kyt.txt@g' /etc/default/dropbear

  # Mengunduh file banner
  wget -O /etc/kyt.txt "${REPO}ubuntu/issue.net" > /dev/null 2>&1

  # Menampilkan pesan sukses
  print_success "Fail2ban installed and configured successfully"
}

##############################################################

function ins_epro() {
  clear
  print_install "Installing ePro WebSocket Proxy"

  # Mengunduh file yang diperlukan
  wget -O /usr/bin/ws "${REPO}ubuntu/ws" >/dev/null 2>&1
  wget -O /usr/bin/tun.conf "${REPO}ubuntu/tun.conf" >/dev/null 2>&1
  wget -O /etc/systemd/system/ws.service "${REPO}ubuntu/ws.service" >/dev/null 2>&1

  # Memberikan hak akses yang tepat
  chmod +x /usr/bin/ws /etc/systemd/system/ws.service
  chmod 644 /usr/bin/tun.conf

  # Mengelola layanan ws
  systemctl disable ws
  systemctl stop ws
  systemctl enable ws
  systemctl start ws
  systemctl restart ws

  # Mengunduh geosite dan geoip
  wget -q -O /usr/local/share/xray/geosite.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat" >/dev/null 2>&1
  wget -q -O /usr/local/share/xray/geoip.dat "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat" >/dev/null 2>&1

  # Mengunduh dan memberikan hak akses untuk ftvpn
  wget -O /usr/sbin/ftvpn "${REPO}ubuntu/ftvpn" >/dev/null 2>&1
  chmod +x /usr/sbin/ftvpn

  # Menambahkan aturan iptables untuk memblokir torrent
  for rule in "get_peers" "announce_peer" "find_node" "BitTorrent" "BitTorrent protocol" "peer_i" ".torrent" "announce.php?passke" "torrent" "announce" "info_hash"; do
    iptables -A FORWARD -m string --string "$rule" --algo bm -j DROP
  done

  # Menyimpan dan menerapkan aturan iptables
  iptables-save > /etc/iptables.up.rules
  iptables-restore -t < /etc/iptables.up.rules
  netfilter-persistent save
  netfilter-persistent reload

  # Membersihkan paket yang tidak digunakan
  apt autoclean -y >/dev/null 2>&1
  apt autoremove -y >/dev/null 2>&1

  # Menampilkan pesan sukses
  print_success "ePro WebSocket Proxy installed successfully"
}

##############################################################

function ins_restart() {
  clear
  print_install "Restarting All Packet"

  # Restart semua layanan yang diperlukan
  /etc/init.d/nginx restart
  /etc/init.d/openvpn restart
  /etc/init.d/ssh restart
  /etc/init.d/dropbear restart
  /etc/init.d/fail2ban restart
  /etc/init.d/vnstat restart
  systemctl restart haproxy
  /etc/init.d/cron restart
  systemctl daemon-reload
  systemctl start netfilter-persistent

  # Mengaktifkan semua layanan yang diperlukan
  systemctl enable --now nginx
  systemctl enable --now xray
  systemctl enable --now rc-local
  systemctl enable --now dropbear
  systemctl enable --now openvpn
  systemctl enable --now cron
  systemctl enable --now haproxy
  systemctl enable --now netfilter-persistent
  systemctl enable --now ws
  systemctl enable --now fail2ban

  # Menghapus file dan membersihkan history
  history -c
  echo "unset HISTFILE" >> /etc/profile
  cd
  rm -f /root/openvpn
  rm -f /root/key.pem
  rm -f /root/cert.pem

  # Menampilkan pesan sukses
  print_success "All Packet"
}


##############################################################

function menu(){
clear
print_install "Installing  Menu Packet"
wget "${REPO}ubuntu/menu.zip"
unzip menu.zip
chmod +x menu/*
mv menu/* /usr/local/sbin
rm -rf menu
rm -rf menu.zip
}

##############################################################

function profile(){
  clear
  
  # Menulis ke file .profile
  cat > /root/.profile <<EOF
if [ "\$BASH" ]; then
  if [ -f ~/.bashrc ]; then
    . ~/.bashrc
  fi
fi
mesg n || true
menu
EOF

  # Menulis ke file cron.d untuk xp_all
  cat > /etc/cron.d/xp_all <<-END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
2 0 * * * root /usr/local/sbin/xp
END

  # Menulis ke file cron.d untuk logclean
  cat > /etc/cron.d/logclean <<-END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/20 * * * * root /usr/local/sbin/clearlog
END

  chmod 644 /root/.profile

  # Menulis ke file cron.d untuk daily_reboot
  cat > /etc/cron.d/daily_reboot <<-END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
0 5 * * * root /sbin/reboot
END

  # Menulis ke file cron.d untuk limit_ip
  cat > /etc/cron.d/limit_ip <<-END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/2 * * * * root /usr/local/sbin/limit-ip
END

  # Menulis ke file cron.d untuk limit_ip2
  cat > /etc/cron.d/limit_ip2 <<-END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/2 * * * * root /usr/bin/limit-ip
END

  # Menulis ke file cron.d untuk log nginx dan xray
  echo "*/1 * * * * root echo -n > /var/log/nginx/access.log" > /etc/cron.d/log.nginx
  echo "*/1 * * * * root echo -n > /var/log/xray/access.log" >> /etc/cron.d/log.xray

  # Restart service cron
  service cron restart

  # Menulis ke file daily_reboot
  cat > /home/daily_reboot <<-END
5
END

  # Menulis ke file systemd untuk rc-local.service
  cat > /etc/systemd/system/rc-local.service <<EOF
[Unit]
Description=/etc/rc.local
ConditionPathExists=/etc/rc.local

[Service]
Type=simple
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=journal
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF

  # Menambahkan /bin/false dan /usr/sbin/nologin ke /etc/shells
  echo "/bin/false" >> /etc/shells
  echo "/usr/sbin/nologin" >> /etc/shells

  # Menulis ke file /etc/rc.local
  cat > /etc/rc.local <<EOF
iptables -I INPUT -p udp --dport 5300 -j ACCEPT
iptables -t nat -I PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 5300
systemctl restart netfilter-persistent
exit 0
EOF

  chmod +x /etc/rc.local

  # Membaca nilai dari file daily_reboot
  AUTOREB=$(cat /home/daily_reboot)
  SETT=5  # Asumsikan SETT adalah angka tetap, Anda bisa menggantinya sesuai kebutuhan

  # Mengecek kondisi dan mencetak waktu jika perlu
  if [ "$AUTOREB" -gt "$SETT" ]; then
    echo "TIME_DATM"
  else
    echo "TIME_DATM"
  fi

  # Menampilkan pesan sukses
  print_success "Menu Packet"
}

##############################################################

function enable_services(){
clear
print_install "Enable Service"
systemctl daemon-reload
systemctl start netfilter-persistent
systemctl enable --now rc-local
systemctl enable --now cron
systemctl enable --now netfilter-persistent
systemctl restart nginx
systemctl restart xray
systemctl restart cron
systemctl restart haproxy
print_success "Enable Service"
clear
}

##############################################################

function instal(){
clear
first_setup
nginx_install
base_package
make_folder_xray
install_domain
password_default
install_ssl
install_xray
ssh
udp_mini
ssh_slow
ins_SSHD
ins_dropbear
ins_vnstat
ins_openvpn
ins_backup
ins_swab
ins_Fail2ban
ins_epro
ins_restart
menu
profile
enable_services
restart_system
}
instal

##############################################################

echo ""
history -c

# Menghapus file dan direktori yang tidak diperlukan
rm -rf /root/menu
rm -rf /root/*.zip
rm -rf /root/*.sh
rm -rf /root/LICENSE
rm -rf /root/README.md
rm -rf /root/domain

# Menghitung waktu yang telah berlalu sejak start dan menampilkan dalam format yang lebih mudah dibaca
secs_to_human="$(($(date +%s) - ${start}))"
echo -e "Time elapsed: $secs_to_human seconds"

# Mengatur hostname dengan nilai dari variabel $username
sudo hostnamectl set-hostname "$username"

# Menampilkan pesan selesai instalasi
echo -e "${green} Installation is completed. Happy Tunneling ${NC}"

# Menunggu input dari pengguna untuk melakukan reboot
echo ""
read -p "$(echo -e "Press ${YELLOW}[ ${NC}${YELLOW}Enter${NC} ${YELLOW}]${NC} For reboot") "

# Melakukan reboot setelah menerima input
sudo reboot

